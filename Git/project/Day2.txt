git diff
Working Directory와 Staging Area 사이의 차이를 확인하기 위한 명령어

깃허브(git hub)
- https://github.com/
- git으로 버전 관리한 코드를 업로드 할 수 있는 클라우드 서비스
- 단순히 저장만 하는 것이 아니라 유저들과 함께 코드를 공유하고 온라인으로 하나의 프로젝트를 개발할 수 있게 해줌


깃과 유사한 사이트
https://bitbucket.org/
https://about.gitlab.com/

✔ README.md
- 깃허브 업로드시 프로젝트 메인 설명글로 사용
- 마크다운 문법으로 작성된 파일


마크다운
- 텍스트 기반의 경량 마크업 언어
- 일반 텍스트로 서식이 있는 문서를 작성하는데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징

1. 제목
    # 제목 -> H1
    ## 제목 -> H2
    ...
    ###### 제목 -> H6

2. 강조
    *잍탤릭체* 또는 _이탤릭체_
    **볼드체**
    **_이탤릭체와 볼드체를 동시에 사용하기_**
    ~~취소선~~
    <ul>밑줄</ul>
    
3. 목록
    1. 순서가 필요한 목록 (앞에 숫자를 표기)
    - 순서가 필요하지 않은 목록
        1. 들여쓰기를 하면 내부 목록으로 작성됨

4. 링크걸기
    [google](https://www.google/com)

5. 코드 작성
    ...
        프로그램 코드를 작성
        ... 
    ...

6. BlockQuote
    > 안녕하세요.
    >> 처음으로 작성하는 
    >>> 마크다운 문법입니다

7. 수평선(구분선) 만들기
    -----------(대충 그으면됨)

8. 이미지 넣기
    <img src ="경로" width = "너비">
    // css가 없기 때문에 내용을 안에 넣는다.

로컬저장소에(내 컴퓨터 - git) github 저장소 주소를 설정
    git remote add origin https://github.com/hunseop2772/test.git

로컬저장소에 github 저장소 주소를 변경
    git remote set-url origin 변경될 주소

로컬저장소에 설정한 주소를 확인
    git remote -v

로컬저장소에 설정한 주소를 삭제
    git remote rm origin

만든 커밋(버전) github에 전송(푸시)
    git push -u origin main(또는 master)

✔ cmd admin
C:\hunseop\Git\Day2\project (main)                                   
λgit add .                                                           
                                                                     
C:\hunseop\Git\Day2\project (main)                                   
λgit  commit -m "git 테스트 페이지 두번째 커밋(README.md 포함)"                   
[main 1397203] git 테스트 페이지 두번째 커밋(README.md 포함)                      
 3 files changed, 21 insertions(+), 1 deletion(-)                    
 create mode 100644 README.md                                        
                                                                     
C:\hunseop\Git\Day2\project (main)                                   
λgit remote add origin https://github.com/hunseop2772/test.git       
                                                                     
C:\hunseop\Git\Day2\project (main)                                   
λ git push -u origin main                                            
info: please complete authentication in your browser...              
Enumerating objects: 11, done.                                       
Counting objects: 100% (11/11), done.                                
Delta compression using up to 16 threads                             
Compressing objects: 100% (9/9), done.                               
Writing objects: 100% (11/11), 1.31 KiB | 1.31 MiB/s, done.          
Total 11 (delta 2), reused 0 (delta 0), pack-reused 0                
remote: Resolving deltas: 100% (2/2), done.                          
To https://github.com/hunseop2772/test.git                           
 * [new branch]      main -> main                                    
branch 'main' set up to track 'origin/main'.         


.gitignore
git add에 포함하고 싶지 않은 파일을 제외시킴

✔ .gitignore 포함할 파일
- 용량이 크거나 불필요한 파일
- 프로젝트와 관계없는 파일
- 보안상으로 위험성이 있는 파일

1. 특정 파일 제외
    파일이름

2. 현재 경로에 있는 제외(다른 폴더에 있는 파일을 제외하지 않음)
    /파일이름

3. 특정 폴더에 파일 모두 제외
    폴더이름/

4. 특정 폴더의 특정 파일을 제외
    폴더이름/파일이름

5. 특정 폴더 아래의 모든 폴더 아래 특정 파일 제외
    폴더이름/**/파일이름
    node_module/**/README.md

6. 특정 확장자 파일을 모두 제외
    *.확장명


클론
github repository에 접속하여 파일을 복제함
    git clone 주소
    git clone https://github.com/99YJH/test.git
    


    C:\hunseop\Git\Day2\project (main -> origin)
    λcd C:\hunseop\Git\Day2\project\test

    C:\hunseop\Git\Day2\project\test (main -> origin)
    λgit statuss                        t
    On branch main
    Your branch is up to date with 'origin/main'.

    Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git restore <file>..." to discard changes in working directory)
            modified:   README.md
            modified:   index.html

    no changes added to commit (use "git add" and/or "git commit -a")

    C:\hunseop\Git\Day2\project\test (main -> origin)
    λgit  add .                         s

    C:\hunseop\Git\Day2\project\test (main -> origin)
    λgit  commit -m "클론 후 README.md, index.html 수정"
    [main 6ad7284] 클론 후 README.md, index.html 수정
    2 files changed, 2 insertions(+), 1 deletion(-)

    C:\hunseop\Git\Day2\project\test (main -> origin)
    λgit  push -u origin main                                                    "
    Enumerating objects: 7, done.
    Counting objects: 100% (7/7), done.
    Delta compression using up to 16 threads
    Compressing objects: 100% (4/4), done.
    Writing objects: 100% (4/4), 466 bytes | 466.00 KiB/s, done.
    Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
    remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
    To https://github.com/99YJH/test.git
    5b1f269..6ad7284  main -> main
    branch 'main' set up to track 'origin/main'.


가저오기 
1. pull
- 협업시 github에 변경된 내용을 가져옴
- remote를 등록해야 함
    git pull

2. fetch
- 원격저장소에 있는 프로젝트의 변경사항을 가져오기만 한 후 병합(merge)은 따로
- 다른 사람이 수정한 부분을 확인하고 병합할 수 있는 장점

버전 되돌리기
1. restore
- 돌아갈 버전 이후는 모두 지우기
- 이후 버전으로 돌아갈 수 없음  
    git reset (번호) --hard
    git reset cb9e437dc47a646f3d994eb0f52f04fecf3a98d7 --hard

2. revert
- 돌아갈 버전이 아닌 돌아갈 버전을 복사해서 현재 버전 뒤로 이동
- reset 처럼 버전 이후가 삭제된 것이 아닌 새 버전이 생김 
    git revert (번호)

소스트리 - 시각화용
https://www.sourcetreeapp.com/


mian, origin/main이 같은 곳에 있어야 잘 커밋된것을 알 수 있다.












