영상의 기하학적 변환
- 영상의 밝기, 명암비 조절, 필터링 등은 픽셀 위치는 고정한 상태에서 픽셀 값만 변경했지만, 기하학적 변환이라는 것은 픽셀 값은 그대로 유지하면서 위치를 변경하는 작업
- 영상을 구성하는 픽셀의 배치 구조를 변경함으로 전체 영상의 모양을 바꾸는 작업

✔ 어파인 변환(affine transformation)
영상을 평행 이동시키거나 회전, 크기 변환 등을 통해 만들 수 있는 변환을 통칭
    영상에서 (x,y) 좌표의 픽셀을 결과 영상의 (x' , y') 좌표로 변환하는 방법
        { x' = f1(x, y), y' = f2(x, y) }

        { x' = f1(x, y) = ax + by + c, , y' = f2(x, y) = dx + ey + f }

        위 수식을 행렬을 이용하여 아래와 같이 표현할 수 있음
        [[x'], [y']] = [[a, b], [d, e]] * [[x], [y]] + [[c], [f]]

        위 수식을 행렬을 이용하여 아래와 같이 용약할 수 있음
        [[x'], [y']] = [[a, b, c], [d, e, f]] * [[x], [y], [1]]
                        ---------   --------
                        # 2 by 3 행렬로(점 3개) 각 꼭지점의 위치를 유추할 수 있다.

> 여섯개의 파라미터로 구성된 2*3 행렬 [[a, b, c], [d, e, f]]를 어파인 변환 행렬이라고 부름

어파인 변환 행렬을 계산
cv2.getAffineTransform(영상, 세 점의 좌표)

어파인 변환 행렬을 가지고 있을 때 영상을 어파인 변환한 결과 영상 생성
cv2.warpAffine(영상, 어파인 변환 행렬, 결과 영상 크기)


✔ 크기 변환(Scale)
영상의 크기를 원본 영상보다 크게 또는 작게 만드는 변환
cv2.resize(영상, 결과 영상 크기, x와 y방향 스케일 비율, 보간법)

✔ 보간법 :  기존에 알고 있는 특정 지점이나 지역의 속성값을 이용하여 알고자 하는 지점 또는 지역의 속성값을 찾아내는 방법이다
cv2.INTER_NEAREST : 최근방 이웃 보간법. 속도가 가장 빠르지만 퀄리티가 많이 떨어짐.
                    openCV 문서에서는 다운 샘플링일 경우 cv2.INTER_NEAREST를 사용하기 권장하고 있음
cv2.INTER_LINEAR : 양선형 보간법. 4새 픽셀을 이용하며 효율성이 가장 좋음
cv2.INTER_CUBIC : 3차 회선 보간법. 16개의 픽셀을 이용. INTER_LINEAR 보다 느리지만 퀄리티는 가장 좋음

cv2.INTER_AREA : 영상 다운 샘플링시 효과적. 영역적인 정보를 추출해서 결과 영상을 세팅


✔ 영상의 회전(rotation)
- 영상을 특정 각도만큼 회전시키는 변환(반시계 방향)
cv2.getRotationMatrix2D(중심 좌표, 회전 각도, 확대 비율) -> affine 행렬값이 나온다.
회전 각도: 반시계 방향. 음수는 시계방향

✔ 투시 변환 : 4개의 꼭지점을 모두 알아야한다.
- 직사각형 형태의 영상을 임의의 블록 사각형 형태로 변경할 수 있는 변환
- 원본 영상에 있던 직선은 결과 영상에서 그대로 유지되지 않고 평행 관계가 깨질 수 있음
- 투시 변환은 보통 3*3 크기의 실수 행렬러 표현(8개의 파라미터로 표현할 수 있지만, 좌표 계산의 편의상 9개의 원소룰 갖는 행렬을 사용)

# 평행하게 나올지 꺽인 상태에서 나올지에 따라 2*3, 3*3인지만 알 수 있으면 된다.

점 4개의 이동 전, 이동 후 좌표를 입력하면 투시 변환 행렬을 반환
cv2.getPerspectiveTransform(영상, 4개의 결과 좌표점)

3*3 투시 변환 행렬을 가지고 있을 때 영상의 투시 변환 결과 영상을 생성
cv2.warpPerspective(영상, 투시 변환 행렬, 결과 영상 크기)


✔ 문제

















