객체의 외곽선 검출
- 레이블링과 함께 영상에서 객체의 정보를 검출하는 방법 중 하나
- 이진화된 영상에서 검출되며 배경 영역과 닿아 있는 픽셀을 찾아 외곽선으로 인식
- 외곽선은 객체 외부 뿐 아니라 내부에도 생길 수 있음

cv2.findContours(영상, 검출 모드, 외각선 좌표 근사화 방법)

검출 모드
RETR_EXTERNAL : 객체 외부 외곽선만 검출
RETR_LIST: 객체 바깥과 안쪽 모든 외곽선 검색, 계층 구조는 만들지 않음
    (객체 외부, 내부 외곽선 모두 검출)
RETR_CCOMP: 모든 외곽선 검출, 2단계계층 구조 구성
RETR_TREE: 모든 외곽선 검출, 전체 계층 구조 구성

외곽선 좌표 근사화 방법
CHAIN_APPROX_NONE: 모든 외곽선 점들의 좌표를 저장
CHAIN_APPROX_SIMPLE: 외곽선 중에서 수평, 수직, 대각선 성분은 끝 점만 저장

cv2.drawContours(영상, 외곽선 좌표 정보, 외곽선 인덱스, (-1을 지정하면 모든 외곽선을 그림), 색상)


외곽선의 길이를 구하는 방법
cv2.arcLength(외곽선 좌표, 폐곡선 여부(T/F))

면적 구하는 방법
cv2.contourArea(외곽선 좌표, True이면 외곽선 진행 방향에 따라 부호 있는 면적을 반환, 기본값은 False)


바운딩 박스(외곽선을 외접하여 둘러싸는 가장 작은 사각형) 구하기
cv2.boundingRect(외곽선 좌표)

외곽선 근사화
검출한 윤곽선 정보를 분석하여 정점수가 적은 윤곽선 또는 다각형으로 표현할 수 있게 만드는 것
cv2.approxPolyDP(외곽선 좌표, 근사화 정밀도 조절, 폐곡선 여부)

원 판별하기
length = cv2.arcLength(외곽선 좌표, 폐곡선 여부(True))
area = cv2.contourArea(외곽선 좌표)
ratio = 4. * math.pi * area / (length * length)

if ratio > 0.85 :
    원이라고 판단!!

###
NumPy는 행렬이나 일반적으로 대규모
다차원 배열을 쉽게 처리할 수 있도록 지원하는 파이썬의 라이브러리

###
Matplotlib는 Python 프로그래밍 언어 및 수학적 확장
NumPy 라이브러리를 활용한 플로팅 라이브러리이다.
Tkinter, wxPython, Qt 또는 GTK 와 같은 범용 GUI 툴킷을 사용하여
애플리케이션에 플롯을 포함 하기 위한 객체 지향 API를 제공

명함 인식 프로그램
1. 영상에서 명함을 검출
    - Otsu 자동 이진화(또렷!)
    - 외곽선 검출 -> 근사화 -> 사각형 검출

2. 영문과 한글 인식
    - 테서렉트 라이브러리를 활용

테서렉트(Tesseract)
- 광학 문자 인식(OCR) 라이브러리 : 텍스트가 쓰여져 있는 이미지를 기계가 읽을 수 있는 텍스트 포멧으로 변화하는 과정 및 기술