EJB(Enterprise Java Beans)
- 동시 접속자수가 10000명이상 사이트 구축시 고려하는 컴퍼넌트 기술
- 속도는 느리지만 많은 이용자수를 감당할 수 있음
- 안정적인 트렌젝션이 필요한 사이트 구축시 사용
- ZEUS, Weblogic


Spring
- 크기와 부하 측면에서 경량급 프레임워크
- EJB 대체
- 현재 표준 기술
- EJB가 없어도 충분히 확장 가능한 웹애플리케이션을 개발할 수 있음을 보여주는 예제 코드가 등장
- 유겐휠러(with 얀카로프)의 주도로 오픈 소스 프로젝트인 스프링 프로젝트가 시작

    2003년 스프링 프레임워크 1.0 출시(xml 기반의 설정)
    2006년 스프링 프레임워크 2.0 출시
    2009년 스프링 프레임워크 3.0 출시(자바 코드로 설정)
    2013년 스프링 프레임워크 4.0 출시(자바 8)
    2014년 스프링 부트 1.0 출시
    2017년 스프링 프레임워크 5.0, 스프링 부트 2.0 출시
    ...


스프링 생태계

    스프링 프레임워크 + 스프링 부트        --->      스프링 데이터, 스프링 세션
    ---------------------------                  스프링 시큐리티, 스프링 Rest Docs
                필수                              스프링 배치, 스프링 클라우드


spring boot(스프링 부트)
- 스프링을 편리하게 사용할 수 있도록 지원(최근에는 기본으로 사용)
- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
- Tomcat 같은 웹서버를 내장하기 때문에 별도의 웹서버를 설치하지 않아도 됨
- 스프링과 3rd party(외부) 라이브러리 자동 구성

✔ 스프링의 핵심 개념
- 자바언어 기반의 프레임워크 -> 자바는 객체지향 언어 -> 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크

객체 지향 특징
- 추상화
    클래스를 정의. 중요한 부분의 특징점을 잡아 추상화하는 과정
- 캡슐화
    객체의 속성을 보호하기 위해 사용. 각 메소드를 서로 관련있게 생성
- 상속
    하위로 내려갈수록 객체를 구체화시킴
- 다형성
    하나의 객체가 여러개의 형태로 변환. 오버라이딩을 통해 구현

객체 지향 프로그래밍의 좋은 형태
- 유연하고 변경이 용이


좋은 객체 지향 설계의 5가지 원칙
(로버트 마틴이 정리한 좋은 객체 지향 설계의 5가지 원칙)
- SRP: 단일 책임 원칙
    1. 한 클래스는 하나의 책임만 가져야 함
    2. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 따르고 있다는 것
- OCP: 개방-폐쇄 원칙
    1. 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 함

        public class MemberService {
            private MemberRepository memberRepository = new MemoryMemberRepository();
        }

        public class MemberService {
            // private MemberRepository memberRepository = new MemoryMemberRepository();
            private MemberRepository memberRepository = new JdbcMemberRepository();
        }
        // 다형성을 사용했지만 OCP 원칙을 지킬 수 없음
        // 객체를 생성하고, 연관관계를 맺어주는 별도의 설정자가 필요!

- LSP: 리스코프 치환 원칙
    1. 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 인스턴스로 바꿀 수 있어야 함
    2. 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙,
    인터페이스를 구현한 구현체는 믿고 사용하려면 이 원칙이 필요함

- ISP: 인터페이스 분리 원칙
    1. 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
    2. 여러 개의 인터페이스로 나누면 인터페이스가 명확해지고, 대체 가능성이 높아짐

- DIP: 의존관계 역전 원칙
    1. 추상화에 의존해야 하고, 구체화에 의존하면 안됨
    2. 구현 클래스에 의존하지 말고, 인터페이스에 의존

    public class MemberService {
        private MemberRepository memberRepository = new MemoryMemberRepository();
    }
    // DIP 위반

✔ 다형성 만으로는 OCP, DIP를 지킬 수 없음
✔ 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경
✔ 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없음



다형성
    역할과 구현을 분리
    클라이언트                   API                서버
        사용자 리스트 ------------------------->    MySQL -------> ORACLE
                    <-------------------------



                           자동차 엔진

         아반떼          k3          소나타          k5

                            여자친구
                 애인역할               와이프역할
                  김사과                 반하나