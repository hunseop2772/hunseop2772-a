리스너(특정 이벤트를 받기 위해 대기)

이벤트 종류

//Post - `직 후` Pre = '직 전'

PostLoad : 엔티티가 영속성 컨텍스트에 조회된 직후

PrePerList : 새로운 인스턴스를 merge할 때 수행. persist() 메소드를 호출해서 엔티티를
영속성 컨텍스트에 관리하기 직전에 호출

PreUpdate :  flush, commit를 호출해서 엔티티를 데이터베이스에 수정하기 직전에 호출

PreRemove : remove 메소드를 호출해서 엔티티를 영속성 컨텍스트에서 삭제하기 직전에 호출

PostPersist : flush, commit를 호출해서 엔티티를 데이터베이스에 저장한 직후에 호출

PostUpdate : flush, commit를 호출해서 엔티티를 데이터베이스에 수정하기 직후에 호출

PostRemove : remove 메소드를 호출해서 엔티티를 영속성 컨텍스트에서 삭제하기 직후에 호출

문제.
users 테이블에 데이터 insert 될 때 reg_date에, update 될 때 update_date에 자동으로 현재시간을 등록

연관 관계 메핑
- 테이블간의 연관 관계가 있을 때 객체지향스럽게 사용하는 방법을 제공
- 데이터베이스에서는 외래키를 사용하지만, JPA에서는 객체를 참조하는 방식으로 연관 관계를 메핑함

@OneToOne : 하나의 엔티티가 하나의 엔티티와 연관 관계를 맺을 때 사용
@OneToMany : 하나의 엔티티가 여러개의 엔티티와 연관 관계를 맺을 때 사용
@ManyToOne : 여러개의 엔티티가 하나의 엔티티와 관계를 맺을 때 사용
@ManyToMany : 여러개의 엔티티가 여러개의 엔티티와 관계를 맺을 때 사용

FetchType
- LAZY(지연로딩)
    - 참조 객체들의 데이터들을 무시하고 해당 엔티티의 데이터만을 가져오는 방법
    - 참조 객체의 데이터를 사용하기 위해 여러번의 쿼리를 사용
- EAGER(즉시로딩)
    - 하나의 객체를 DB로 부터 읽어올 때 참조 객체들의 데이터까지 전부 읽어오는 방식
    - 한번의 쿼리로 모든 정보를 가져옴